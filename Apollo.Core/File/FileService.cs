using Newtonsoft.Json;
using System.Globalization;
using Apollo.Core.Dto;
using Apollo.Core.Model;
using Apollo.Core.Notification;
using Apollo.Core.Sftp;

namespace Apollo.Core;

public interface IFileService
{
    public Task TransferAllFiles();

    public void CleanUpExpiredArchivedFiles(int _retentionDays);

    public void CleanUpExpiredLogFiles(string _rootLogDir, int _retentionDays);

    IEnumerable<string>? GetAllFiles(string _dir);
}

public class FileService : IFileService
{
    private readonly ILogger<FileService> _logger;
    private readonly NotificationService _notifier;
    private readonly string _rootDir;
    private readonly string _rootArchivedDir;
    private const string _templateBody = "{freeText}\n"
                            + "\n"
                            + "{fileList}\n"
                            + "\n";

    private const string _templateFooter = "üíª Host: {HostName}\n"
                            + "({PublicIPv4}, {PrivateIPv4})\n"
                            + "ÏãúÏûë: {StartedAt}\n"
                            + "Ï¢ÖÎ£å: {CompletedAt}\n"
                            + "({Duration} ÏÜåÏöî)";

    public FileService(ILogger<FileService> logger, NotificationService notifier)
    {
        _logger = logger;
        _notifier = notifier;
        _rootDir = Conf.Current.source.mounted_path?.path ?? "";
        _rootArchivedDir = Conf.Current.source.mounted_path?.archive_path ?? "";
    }

    public async Task TransferAllFiles()
    {
        DateTime startedAt = DateTime.Now;
        DateTime completedAt;

        try
        {
            var files = GetAllFiles(_rootDir);
            var TotalCount = files?.Count() ?? 0;

            List<string> successFiles = new List<string>();
            List<string> failedFiles = new List<string>();

            string _footer = _templateFooter;

            if (Conf.CurrentNetInfo.PublicIPv4?.ToString() == Conf.CurrentNetInfo.PrivateIPv4?.ToString())
            {
                _footer = _footer
                    .Replace("({PublicIPv4}, {PrivateIPv4})", "({PublicIPv4})");
            }

            _footer = _footer
                    .Replace("{HostName}", Conf.CurrentNetInfo.HostName)
                    .Replace("{PublicIPv4}", Conf.CurrentNetInfo.PublicIPv4?.ToString() ?? "")
                    .Replace("{PrivateIPv4}", Conf.CurrentNetInfo.PrivateIPv4?.ToString() ?? "")
                    .Replace("{StartedAt}", $"{startedAt:MM-dd HH:mm:ss.fff}");

            // source (mounted_path) ÏïàÏóê ÏïÑÎ¨¥ ÌååÏùºÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞
            if (files is null || !files.Any())
            {
                //if ((startedAt.Hour == 9 && startedAt.Minute == 0 && startedAt.Second >= 0 && startedAt.Second < 10) // 09:00
                //    || (startedAt.Hour == 15 && startedAt.Minute == 0 && startedAt.Second >= 0 && startedAt.Second < 10) // 15:00
                //    || (startedAt.Hour == 21 && startedAt.Minute == 0 && startedAt.Second >= 0 && startedAt.Second < 10) // 21:00
                //    )
                //{
                    completedAt = DateTime.Now;
                    TimeSpan duration2 = completedAt - startedAt;

                    _footer = _footer
                        .Replace("{CompletedAt}", $"{completedAt:MM-dd HH:mm:ss.fff}")
                        .Replace("{Duration}", $"{duration2.TotalHours:00}:{duration2.Minutes:00}:{duration2.Seconds:00}.{duration2.Milliseconds:000}")
                        ;

                    NotifyMessage(TotalCount, successFiles, failedFiles, _footer);
                //}

                _logger.LogInformation($"TransferAllFiles - No files found in the source directory: {_rootDir}");

                return;
            }


            // AzureBlobService ÏßÅÏ†ë ÏÉùÏÑ±
            AzureBlobSftpConfig? config = Conf.Current.target.azure_blob_sftp;
            if (config is null)
            {
                _logger.LogError("Conf.Current.target.azure_blob_sftp is null. Please check your AirBridgeConfig.yaml file.");
                return;
            }


            // Î™®Îì† ÌååÏùºÏóê ÎåÄÌï¥ Ï≤òÎ¶¨ÌïòÎäî loop ÏãúÏûë
            foreach (var file in files)
            {
                var fi = new FileInfo(file);

                if (!fi.Exists)
                {
                    _logger.LogWarning($"fileInfo is not exists. - {fi.FullName}");
                    continue;
                }

                FileInfoDto _fi = new FileInfoDto(
                    fi.Name,
                    fi.FullName,
                    fi.Extension,
                    fi.Length,
                    fi.IsReadOnly,
                    fi.UnixFileMode,
                    DirectoryName: fi.DirectoryName ?? "",
                    DirectoryInfoDto: new DirectoryInfoDto(
                        fi.Directory?.Name ?? "",
                        fi.Directory?.FullName ?? "",
                        fi.Directory?.UnixFileMode ?? UnixFileMode.None,
                        fi.Directory?.CreationTime ?? DateTime.Now,
                        fi.Directory?.CreationTimeUtc ?? DateTime.UtcNow,
                        fi.Directory?.LastAccessTime ?? DateTime.Now,
                        fi.Directory?.LastAccessTimeUtc ?? DateTime.UtcNow,
                        fi.Directory?.LastWriteTime ?? DateTime.Now,
                        fi.Directory?.LastWriteTimeUtc ?? DateTime.UtcNow
                    ),
                    fi.CreationTime,
                    fi.CreationTimeUtc,
                    fi.LastAccessTime,
                    fi.LastAccessTimeUtc,
                    fi.LastWriteTime,
                    fi.LastWriteTimeUtc
                );

                _logger.LogInformation($"_fi.Name = {_fi.Name}, _fi.FullPath = {_fi.FullPath}, _fi = {JsonConvert.SerializeObject(_fi, Formatting.None)}");

                /*
                FileInfoDto Example Value:

                ```json
                {
                    "Name": "20250701220000_NXT_IF_Derivatives_Receivable",
                    "FullPath": "C:\\AirBridgeTestLedgerRoot\\aback\\20250701220000_NXT_IF_Derivatives_Receivable",
                    "Extension": "",
                    "Length": 520,
                    "IsReadOnly": false,
                    "UnixFileMode": -1,
                    "DirectoryName": "C:\\AirBridgeTestLedgerRoot\\aback",
                    "DirectoryInfoDto": {
                        "Name": "aback",
                        "FullPath": "C:\\AirBridgeTestLedgerRoot\\aback",
                        "UnixFileMode": -1,
                        "CreationTime": "2025-08-22T10:03:24.9781533+09:00",
                        "CreationTimeUtc": "2025-08-22T01:03:24.9781533Z",
                        "LastAccessTime": "2025-08-28T09:03:18.7650738+09:00",
                        "LastAccessTimeUtc": "2025-08-28T00:03:18.7650738Z",
                        "LastWriteTime": "2025-08-22T10:08:33.6255447+09:00",
                        "LastWriteTimeUtc": "2025-08-22T01:08:33.6255447Z"
                    },
                    "CreationTime": "2025-08-04T11:14:37.1145199+09:00",
                    "CreationTimeUtc": "2025-08-04T02:14:37.1145199Z",
                    "LastAccessTime": "2025-08-25T12:57:41.4109867+09:00",
                    "LastAccessTimeUtc": "2025-08-25T03:57:41.4109867Z",
                    "LastWriteTime": "2025-08-04T10:22:32.8629765+09:00",
                    "LastWriteTimeUtc": "2025-08-04T01:22:32.8629765Z"
                }
                ```
                */

                // ÌÅ¥ÎûòÏä§ Ï†ÑÏó≠ Î≥ÄÏàò private AzureBlobService? _blob ÌïÑÎìúÎäî ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ≥†, ÎåÄÏã† ÏßÄÏó≠ using var blob = new AzureBlobService(...); ÏúºÎ°ú ÏàòÎ™ÖÏ£ºÍ∏∞Î•º ÏßßÍ≤å Ïû°ÏïÑÏ§å.
                using var _blob = new AzureBlobService(config);

                // DirectoryName "C:\\AirBridgeTestLedgerRoot\\aback" Ï§ëÏóêÏÑú mounted_path "C:\\AirBridgeTestLedgerRoot" ÏùÑ "" ÏúºÎ°ú Î≥ÄÍ≤Ω
                // Í≤∞Î°†ÏùÄ "\\aback" Ïù¥Îü∞ ÌòïÌÉúÏùò ÏÉÅÎåÄÍ≤ΩÎ°úÎßå ÎÇ®ÎäîÎã§.
                string relativeDir = _fi.DirectoryName // "C:\\AirBridgeTestLedgerRoot\\aback"
                    .Replace(_rootDir, "") // "\\aback"
                    .Replace(@"\", ""); // "aback"

                try
                {
                    // SFTP home directory ÌïòÏúÑÏóê Ìè¥Îçî ÏÉùÏÑ±
                    await _blob.MkDir($"{relativeDir}");

                    _logger.LogInformation($"Azure Blob Ìè¥Îçî ÏÉùÏÑ± ÏÑ±Í≥µ: {relativeDir}");

                    // ÌååÏùº ÏóÖÎ°úÎìú (Î¨¥Ï°∞Í±¥ Overwrite)
                    await _blob.UploadFile(_fi.FullPath, $"{relativeDir}/{fi.Name}");

                    _logger.LogInformation($"Azure Blob ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ: {relativeDir}/{fi.Name}");
                }
                catch (Exception ex)
                {
                    failedFiles.Add(_fi.FullPath);

                    _logger.LogError(ex, $"Azure Blob Ï≤òÎ¶¨ Ï§ë ÏóêÎü¨ Î∞úÏÉù! {ex.Message}");
                    continue;
                }
                finally
                {
                    _blob?.Dispose();
                }

                // ÏõêÎ≥∏ ÌååÏùºÏùÑ path -> archive_path ÏúºÎ°ú Ïù¥Îèô
                try
                {
                    if (Conf.Current.source.mounted_path is not null)
                    {
                        // archive_path/relativeDir ÎîîÎ†âÌÜ†Î¶¨ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
                        if (!Directory.Exists(Path.Combine(Conf.Current.source.mounted_path.archive_path, relativeDir)))
                            Directory.CreateDirectory(Path.Combine(Conf.Current.source.mounted_path.archive_path, relativeDir));

                        // archive_path/relativeDir/fileName Ï°¥Ïû¨ÌïòÎ©¥ ÏÇ≠Ï†ú
                        if (File.Exists(Path.Combine(Conf.Current.source.mounted_path.archive_path, relativeDir, _fi.Name)))
                            File.Delete(Path.Combine(Conf.Current.source.mounted_path.archive_path, relativeDir, _fi.Name));

                        // ÌååÏùº Ïù¥Îèô
                        File.Move(_fi.FullPath,
                            Path.Combine(Conf.Current.source.mounted_path.archive_path, relativeDir, _fi.Name)
                            );

                        _logger.LogInformation($"archive pathÎ°ú ÌååÏùº Î≥¥Í¥Ä ÏÑ±Í≥µ! -> archive_path = {Path.Combine(Conf.Current.source.mounted_path.archive_path, relativeDir, _fi.Name)}");
                    }
                }
                catch (Exception ex)
                {
                    failedFiles.Add(_fi.FullPath);

                    _logger.LogError(ex, $"archive pathÎ°ú ÌååÏùº Î≥¥Í¥Ä Ï§ë ÏóêÎü¨ Î∞úÏÉù! {ex.Message}");
                    continue;
                }

                successFiles.Add(_fi.FullPath);
            }

            // Î©îÏãúÏßÄ Î∞úÏÜ° Ï§ÄÎπÑ

            // Config ÏÉÅÏóê ÏÑ§Ï†ïÎêú Í≤ΩÎ°úÎäî ""ÏúºÎ°ú ÏùºÍ¥Ñ Î≥ÄÍ≤Ω. (Î™®Îì† ÌååÏùºÏùò FullPath ÏïûÏ™ΩÏùÄ Îã§ ÎèôÏùºÌï®)
            successFiles = successFiles.Select(s => s.Replace(_rootDir, "")).ToList();
            failedFiles = failedFiles.Select(s => s.Replace(_rootDir, "")).ToList();

            completedAt = DateTime.Now;
            TimeSpan duration = completedAt - startedAt;

            _footer = _footer
                .Replace("{CompletedAt}", $"{completedAt:MM-dd HH:mm:ss.fff}")
                .Replace("{Duration}", $"{duration.TotalHours:00}:{duration.Minutes:00}:{duration.Seconds:00}.{duration.Milliseconds:000}");

            // Î©îÏãúÏßÄ Î∞úÏÜ°
            NotifyMessage(TotalCount, successFiles, failedFiles, _footer);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"TransferAllFiles() ÎÇ¥Î∂ÄÏóêÏÑú ÏóêÎü¨ Î∞úÏÉù!: {ex.Message}");
            return;
        }
    }

    public void CleanUpExpiredArchivedFiles(int _retentionDays)
    {
        try
        {
            var files = GetAllFiles(_rootArchivedDir);

            var expiredArchivedFiles = files?
                .Where(f => {
                    var fi = new FileInfo(f);
                    // "CreationTime": "2025-08-04T11:14:37.1145199+09:00"
                    return fi.CreationTime.AddDays(_retentionDays) < DateTime.Now; // 20250814 Ïóê 90ÏùºÏùÑ ÎçîÌï¥ÎèÑ Ïò§ÎäòÎ≥¥Îã§ Ïù¥Ï†Ñ (= 90Ïùº Ï¥àÍ≥º)
                })
                .ToList();

            if (expiredArchivedFiles is null || !expiredArchivedFiles.Any())
            {
                _logger.LogInformation($"CleanUpExpiredArchivedFiles - No expired files found in the archived directory: {_rootArchivedDir}");
                return;
            }

            foreach (var file in expiredArchivedFiles)
            {
                if (File.Exists(file))
                {
                    File.Delete(file);

                    _logger.LogInformation($"CleanUpExpiredArchivedFiles - ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: {file}");
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"CleanUpExpiredArchivedFiles() ÎÇ¥Î∂ÄÏóêÏÑú ÏóêÎü¨ Î∞úÏÉù!: {ex.Message}");
            return;
        }
    }

    public void CleanUpExpiredLogFiles(string _rootLogDir, int _retentionDays)
    {
        try
        {
            var files = GetAllFiles(_rootLogDir);

            var expiredLogFiles = files?
                .Where(f => f.EndsWith(".log", StringComparison.OrdinalIgnoreCase))
                .Where(f => {
                    var name = Path.GetFileNameWithoutExtension(f); // "AirBridge-20250814"

                    if (string.IsNullOrEmpty(name) || name.Length < 8) return false;

                    var tail = name.AsSpan(name.Length - 8, 8); // ÌååÏùºÎ™Ö ÎÅù 8ÏûêÎ¶¨: "20250814"

                    DateTime date = DateTime.ParseExact(tail, "yyyyMMdd", CultureInfo.InvariantCulture);

                    return date.AddDays(_retentionDays) < DateTime.Now; // 20250814 Ïóê 90ÏùºÏùÑ ÎçîÌï¥ÎèÑ Ïò§ÎäòÎ≥¥Îã§ Ïù¥Ï†Ñ (= 90Ïùº Ï¥àÍ≥º)
                })
                .ToList();

            if (expiredLogFiles is null || !expiredLogFiles.Any())
            {
                _logger.LogInformation($"CleanUpExpiredLogFiles - No expired files found in the log directory: {_rootLogDir}");
                return;
            }

            foreach (var file in expiredLogFiles)
            {
                if (File.Exists(file))
                {
                    File.Delete(file);

                    _logger.LogInformation($"CleanUpExpiredLogFiles - ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: {file}");
                }

                ////Path.GetFileNameWithoutExtension(logf) = "AirBridge-20250814"
                //var yyyyMMdd = Path.GetFileNameWithoutExtension(file).Substring(10, 8); // "20250814"
                //DateTime fileDate = DateTime.ParseExact(yyyyMMdd, "yyyyMMdd", CultureInfo.InvariantCulture);

                //// Î≥¥Í¥ÄÏùºÏàò _retentionDays ÏùÑ Ï¥àÍ≥ºÌïú ÎßåÌÅº ÏòõÎÇ† ÌååÏùºÏù¥Î©¥ ÏÇ≠Ï†ú
                //if (fileDate.AddDays(_retentionDays) < DateTime.Now)
                //{
                //    if (File.Exists(file))
                //    {
                //        File.Delete(file);

                //        _logger.LogInformation($"CleanUpLogFiles - ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: {file}");
                //    }
                //}
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"CleanUpExpiredLogFiles() ÎÇ¥Î∂ÄÏóêÏÑú ÏóêÎü¨ Î∞úÏÉù!: {ex.Message}");
            return;
        }
    }

    public IEnumerable<string>? GetAllFiles(string _dir)
    {
        try
        {
            return Directory.EnumerateFiles(_dir, "*", SearchOption.AllDirectories);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Failed to enumerate files in directory: {_dir}");
            return Array.Empty<string>();
        }
    }

    private void NotifyMessage(int totalCount, List<string> successFiles, List<string> failedFiles, string _footer)
    {
        NotificationStyle _style = NotificationStyle.Information;
        string _title = "AirBridge ÏõêÏû• Ï§ëÍ≥Ñ Ï≤òÎ¶¨ ÏïåÎ¶º";
        string _body = _templateBody;

        if (totalCount == 0) // Information -> Ï†ÑÏÜ°Ìï† ÌååÏùºÏù¥ ÏóÜÎäî Í≤ΩÏö∞
        {
            _style = NotificationStyle.Information;
            _title = $"({successFiles.Count}/{totalCount}) üîµ " + _title; // ÌååÎûÄÏõê
            _body = _body
                .Replace("{freeText}\n", "üìÇ Ï≤òÎ¶¨Ìï† ÌååÏùº ÏóÜÏùå.")
                .Replace("{fileList}\n", "");
        }
        else if (totalCount == successFiles.Count) // Success -> Î™®Îì† ÌååÏùºÏù¥ ÏÑ±Í≥µÌñàÏùÑ Í≤ΩÏö∞
        {
            _style = NotificationStyle.Success;
            _title = $"({successFiles.Count}/{totalCount}) üü¢ " + _title; // Ï¥àÎ°ùÏõê
            _body = _body
                .Replace("{freeText}", $"üìÇ Ï¥ù {totalCount}Í∞ú ÌååÏùº -> ÏÑ±Í≥µ {successFiles.Count}Í∞ú, Ïã§Ìå® {failedFiles.Count}Í∞ú")
                .Replace("{fileList}", $"‚úÖ **ÏÑ±Í≥µ Î™©Î°ù**\n{string.Join("\n", successFiles)}");
        }
        else if (totalCount == failedFiles.Count) // Error -> Î™®Îì† ÌååÏùºÏù¥ Ïã§Ìå®ÌñàÏùÑ Í≤ΩÏö∞
        {
            _style = NotificationStyle.Error;
            _title = $"({successFiles.Count}/{totalCount}) [‚õî ACTION REQUIRED] " + _title; // Îπ®Í∞ÑÍ∏àÏßÄÏïÑÏù¥ÏΩò
            _body = _body
                .Replace("{freeText}", $"üìÇ Ï¥ù {totalCount}Í∞ú ÌååÏùº -> ÏÑ±Í≥µ {successFiles.Count}Í∞ú, Ïã§Ìå® {failedFiles.Count}Í∞ú")
                .Replace("{fileList}", $"‚ùå **Ïã§Ìå® Î™©Î°ù**\n{string.Join("\n", failedFiles)}");
        }
        else // Warning -> Î∂ÄÎ∂Ñ ÏÑ±Í≥µ (= Î∂ÄÎ∂Ñ Ïã§Ìå®)
        {
            _style = NotificationStyle.Warning;
            _title = $"({successFiles.Count}/{totalCount}) üü¢ " + _title; // Ï¥àÎ°ùÏõê
            _body = _body
                .Replace("{freeText}", $"üìÇ Ï¥ù {totalCount}Í∞ú ÌååÏùº -> ÏÑ±Í≥µ {successFiles.Count}Í∞ú, Ïã§Ìå® {failedFiles.Count}Í∞ú")
                .Replace("{fileList}", $"‚úÖ **ÏÑ±Í≥µ Î™©Î°ù**\n{string.Join("\n", successFiles)}\n\n‚ùå **Ïã§Ìå® Î™©Î°ù**\n{string.Join("\n", failedFiles)}");
        }

        _body += _footer;

        _notifier.Notify(
            NotificationType.Lark_Webhook,
            new NotificationMessage(_style, _title, _body, null)
            );
    }
}