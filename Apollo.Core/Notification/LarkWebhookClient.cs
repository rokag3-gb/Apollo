using Apollo.Core.Dto;
using Apollo.Core.Model;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
// using Newtonsoft.Json;

namespace Apollo.Core.Notification;

public class LarkWebhookClient
{
    private readonly string _webhookUrl;
    private readonly string _secretToken;
    private readonly HttpClient _httpClient;

    public LarkWebhookClient(string webhookUrl, string secretToken)
    {
        _webhookUrl = webhookUrl;
        _secretToken = secretToken;
        _httpClient = new HttpClient();
    }

    private string GenerateSignature(string secret, string timestamp)
    {
        string stringToSign = $"{timestamp}\n{secret}";
        byte[] keyBytes = Encoding.UTF8.GetBytes(stringToSign);
        byte[] emptyBytes = Array.Empty<byte>();

        using var hmac = new HMACSHA256(keyBytes);
        byte[] hash = hmac.ComputeHash(emptyBytes);

        return Convert.ToBase64String(hash);
    }

    public async Task SendMessageAsync(string message)
    {
        // Unix timestamp in seconds
        string timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
        //Console.WriteLine($"[DEBUG] Request payload timestamp: {timestamp}");
        //Console.WriteLine($"[DEBUG] Current UTC time: {DateTimeOffset.UtcNow}");

        var sign = GenerateSignature(_secretToken, timestamp);

        // Lark Í∞ÑÎã® ÌÖçÏä§Ìä∏
        /*var payload = new
        {
            timestamp = timestamp,
            sign = sign,
            msg_type = "text",
            content = new { text = message }
        };*/

        // Lark ÎßàÌÅ¨Îã§Ïö¥
        /*var payload = new
        {
            timestamp = timestamp,
            sign = sign,
            msg_type = "post",
            content = new
            {
                post = new
                {
                    en_us = new
                    {
                        title = "Í≤∞Ï†ú ÎÇ¥Ïó≠ Î≥¥Í≥†ÏÑú",
                        content = new object[][]
                        {
                            new object[]
                            {
                                new
                                {
                                    tag = "text",
                                    text = "üîî "
                                },
                                new
                                {
                                    tag = "text",
                                    text = "**Í≤∞Ï†ú ÎÇ¥Ïó≠ Î≥¥Í≥†ÏÑú**   _243_\n"
                                }
                            },
                            new object[]
                            {
                                new
                                {
                                    tag = "text",
                                    text = "- Ïò§Îäò Í≤∞Ï†ú Í±¥Ïàò: 5Í±¥\n- Í≤∞Ï†ú Ï¥ùÏï°: ‚Ç©2,345,000\n"
                                }
                            },
                            new object[]
                            {
                                new
                                {
                                    tag = "a",
                                    text = "ÏûêÏÑ∏Ìûà Î≥¥Í∏∞",
                                    href = "https://example.com/report"
                                }
                            }
                        }
                    }
                }
            }
        };*/

        // Lark ÏÑ±Í≥µ Ïπ¥Îìú Î©îÏãúÏßÄ (ÎßàÌÅ¨Îã§Ïö¥)
        /*var payload = new
        {
            timestamp = timestamp,
            sign = sign,
            msg_type = "interactive",
            card = new
            {
                header = new
                {
                    title = new
                    {
                        tag = "plain_text",
                        content = "üòä AirBridge batch result message (ÌÖåÏä§Ìä∏)"
                    },
                    template = "green" // "blue" (Í∏∞Î≥∏), "wathet" (Î∞ùÏùÄ ÌååÎûë), "turquoise" (ÎØºÌä∏ÏÉâ), "green", "yellow", "orange", "red", "purple", "grey"
                },
                elements = new object[]
                {
                    new
                    {
                        tag = "div",
                        text = new
                        {
                            tag = "lark_md",
                            content = "**AirBridge Ï≤òÎ¶¨ Í≤∞Í≥ºÏûÖÎãàÎã§.**\n_(AirBridgeÎäî Ï§ëÍ≥Ñ ÏÑúÎ≤Ñ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùò Ïù¥Î¶ÑÏûÖÎãàÎã§.)_"
                        }
                    },
                    new
                    {
                        tag = "div",
                        text = new
                        {
                            tag = "lark_md",
                            content = "**94Í∞ú ÌååÏùºÏóê ÎåÄÌïú batchÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.**\n"
                            + "\n"
                            + "_NXT_IF_Derivatives_: **47**Í∞ú\n"
                            + "_NXT_IF_Employees_: **1**Í∞ú\n"
                            + "_NXT_IF_BusinessDay_: **9**Í∞ú\n"
                            + "_NXT_IF_PB_Securities_: **34**Í∞ú\n"
                            + "_NXT_IF_Derivatives_Receivable_: **3**Í∞ú\n"
                            + "\n"
                            + "_ene of message_"
                        }
                    }
                }
            }
        };*/

        // Lark Ïã§Ìå® Ïπ¥Îìú Î©îÏãúÏßÄ (ÎßàÌÅ¨Îã§Ïö¥)
        var payload = new LarkPayload
        {
            Timestamp = timestamp,
            Sign = sign,
            MsgType = "interactive",
            Card = new LarkCard
            {
                Header = new LarkHeader
                {
                    Title = new LarkTitle
                    {
                        Tag = "plain_text",
                        Content = "[ACTION REQUIRED] ‚ò†Ô∏è AirBridge batch result message (ÌÖåÏä§Ìä∏)"
                    },
                    Template = "red" // "blue" (Í∏∞Î≥∏), "wathet" (Î∞ùÏùÄ ÌååÎûë), "turquoise" (ÎØºÌä∏ÏÉâ), "green", "yellow", "orange", "red", "purple", "grey"
                },
                Elements = new LarkElement[]
                {
                    new LarkElement
                    {
                        Tag = "div",
                        Text = new LarkText
                        {
                            Tag = "lark_md",
                            Content = "**AirBridge Ï≤òÎ¶¨ Í≤∞Í≥ºÏûÖÎãàÎã§.**\n_(AirBridgeÎäî Ï§ëÍ≥Ñ ÏÑúÎ≤Ñ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùò Ïù¥Î¶ÑÏûÖÎãàÎã§.)_"
                        }
                    },
                    new LarkElement
                    {
                        Tag = "div",
                        Text = new LarkText
                        {
                            Tag = "lark_md",
                            Content = "**94Í∞ú ÌååÏùºÏóê ÎåÄÌïú batchÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.**\n"
                            + "\n"
                            + "_NXT_IF_Derivatives_: **47**Í∞ú\n"
                            + "_NXT_IF_Employees_: **1**Í∞ú\n"
                            + "_NXT_IF_BusinessDay_: **9**Í∞ú\n"
                            + "_NXT_IF_PB_Securities_: **34**Í∞ú\n"
                            + "_NXT_IF_Derivatives_Receivable_: **3**Í∞ú\n"
                            + "\n"
                            + "_ene of message_"
                        }
                    }
                }
            }
        };

        // Lark ÌÖçÏä§Ìä∏ + ÎßàÌÅ¨Îã§Ïö¥ + Î≤ÑÌäº
        /*var payload = new
        {
            timestamp = timestamp,
            sign = sign,
            msg_type = "interactive",
            card = new
            {
                header = new
                {
                    title = new
                    {
                        tag = "plain_text",
                        content = "üòä Lark Î©îÏãúÏßÄ ÌÖåÏä§Ìä∏ Î∞úÏÜ°"
                    },
                    template = "green" // "blue" (Í∏∞Î≥∏), "wathet" (Î∞ùÏùÄ ÌååÎûë), "turquoise" (ÎØºÌä∏ÏÉâ), "green", "yellow", "orange", "red", "purple", "grey"
                },
                elements = new object[]
                {
                    new
                    {
                        tag = "div",
                        text = new
                        {
                            tag = "lark_md",
                            content = "**ÏßÄÍ∏à Ï≤òÎ¶¨ÌïòÍ≤†ÏäµÎãàÍπå?** _(Í∂ÅÍ∏àÍ∂ÅÍ∏à)_"
                        }
                    },
                    new
                    {
                        tag = "div",
                        text = new
                        {
                            tag = "lark_md",
                            content = "# markdown ÏãúÏûë - ÎåÄÏ†úÎ™©\n"
                            + "## Ï§ëÏ†úÎ™©\n"
                            + "### ÏÜåÏ†úÎ™©\n"
                            + "\n"
                            + "- Î™©Î°ù1\n"
                            + "- Î™©Î°ù2\n"
                            + "\n"
                            + "1. ÏàúÏÑú1\n"
                            + "2. ÏàúÏÑú2\n"
                            + "\n"
                            + "**ÍµµÍ≤åBold**, *Í∏∞Ïö∏ÏûÑItalic1*, _Í∏∞Ïö∏ÏûÑItalic2_, ~~Ï∑®ÏÜåÏÑ†strikethrough~~, `Ïù∏ÎùºÏù∏ ÏΩîÎìú`\n"
                            + "\n"
                            + "[](https://naver.com)\n"
                            + "\n"
                            + "> Ïù∏Ïö©Î¨∏\n"
                            + "Í∞ÄÎÇòÎã§ÎùºÎßàÎ∞îÏÇ¨\n"
                            + "\n"
                            + "```shell\n"
                            + "cp * ~/test/test-root/\n"
                            + "```\n"
                            + "\n"
                            + "_ene of message_"
                        }
                    },
                    // msg_type = "interactive" ÏóêÏÑúÎäî tag "a" ÏÇ¨Ïö© Î∂àÍ∞Ä
                    new
                    {
                        tag = "a",
                        text = "NXT Ledger I/F Schema (estimation)",
                        href = "https://nsgbpjpgygq3.sg.larksuite.com/docx/GUZudqWlRo5KZ7x0uV7lkxtkgcb"
                    },
                    // tag = "button" ÏùÄ Ìï¥Îãπ action eventÎ•º Î∞õÏïÑÏÑú Ï≤òÎ¶¨Ìï¥Ï§Ñ Ïàò ÏûàÎäî Î≥ÑÎèÑÏùò ÏÑúÎ≤Ñ Í∞úÎ∞úÏù¥ ÌïÑÏöîÌï®.
                    new
                    {
                        tag = "action",
                        actions = new object[]
                        {
                            new
                            {
                                tag = "button",
                                text = new
                                {
                                    tag = "plain_text",
                                    content = "ÏäπÏù∏"
                                },
                                type = "primary",
                                value = new { action = "approve" }
                            },
                            new
                            {
                                tag = "button",
                                text = new
                                {
                                    tag = "plain_text",
                                    content = "Í±∞Ï†à"
                                },
                                type = "danger",
                                value = new { action = "reject" }
                            }
                        }
                    }
                }
            }
        }; */

        var content = new StringContent(
            // JsonConvert.SerializeObject(payload),
            JsonSerializer.Serialize(payload, LarkJsonContext.Default.LarkPayload),
            Encoding.UTF8,
            "application/json"
        );

        var response = await _httpClient.PostAsync(_webhookUrl, content);
        var responseBody = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"Failed to send message: {responseBody}");
        }

        // var result = JsonConvert.DeserializeObject<WebhookResponse>(responseBody);
        var result = JsonSerializer.Deserialize<WebhookResponse>(responseBody, LarkJsonContext.Default.WebhookResponse);
        if (result?.Code != 0)
        {
            throw new Exception($"Failed to send message: {result?.Msg}");
        }
    }

    public async Task SendMessageAsync(NotificationMessage notificationMessage)
    {
        // Unix timestamp in seconds
        string timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
        //Console.WriteLine($"[DEBUG] Request payload timestamp: {timestamp}");
        //Console.WriteLine($"[DEBUG] Current UTC time: {DateTimeOffset.UtcNow}");

        var sign = GenerateSignature(_secretToken, timestamp);

        // Lark interactive card with markdown
        var payload = new LarkPayload
        {
            Timestamp = timestamp,
            Sign = sign,
            MsgType = "interactive",
            Card = new LarkCard
            {
                Header = new LarkHeader
                {
                    Title = new LarkTitle
                    {
                        Tag = "plain_text",
                        Content = notificationMessage.Title // "[ACTION REQUIRED] ‚ò†Ô∏è AirBridge batch result message (ÌÖåÏä§Ìä∏)"
                    },
                    // Ïπ¥Îìú ÏÉÅÎã® Î∞∞Í≤ΩÏÉâ: "blue" (Í∏∞Î≥∏), "wathet" (Î∞ùÏùÄ ÌååÎûë), "turquoise" (ÎØºÌä∏ÏÉâ), "green", "yellow", "orange", "red", "purple", "grey"
                    //Template = "red"
                    //Template = switch case notificationMessage.Style
                    Template = notificationMessage.Style switch
                    {
                        NotificationStyle.Information => "blue",
                        NotificationStyle.Success => "green",
                        NotificationStyle.Warning => "orange",
                        NotificationStyle.Error => "red",
                        _ => throw new NotSupportedException($"ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÏïåÎ¶º Ï±ÑÎÑêÏûÖÎãàÎã§: {notificationMessage.Style}")
                    }
                },
                Elements = new LarkElement[]
                {
                    new LarkElement
                    {
                        Tag = "div",
                        Text = new LarkText
                        {
                            Tag = "lark_md",
                            Content = notificationMessage.Body
                        }
                    }
                }
            }
        };

        var content = new StringContent(
            JsonSerializer.Serialize(payload, LarkJsonContext.Default.LarkPayload),
            Encoding.UTF8,
            "application/json"
        );

        var response = await _httpClient.PostAsync(_webhookUrl, content);
        var responseBody = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception($"Failed to send message: {responseBody}");
        }

        // var result = JsonConvert.DeserializeObject<WebhookResponse>(responseBody);
        var result = JsonSerializer.Deserialize<WebhookResponse>(responseBody, LarkJsonContext.Default.WebhookResponse);
        if (result?.Code != 0)
        {
            throw new Exception($"Failed to send message: {result?.Msg}");
        }
    }
}

[JsonSourceGenerationOptions(PropertyNamingPolicy = JsonKnownNamingPolicy.SnakeCaseLower)]
[JsonSerializable(typeof(LarkPayload))]
[JsonSerializable(typeof(LarkCard))]
[JsonSerializable(typeof(LarkHeader))]
[JsonSerializable(typeof(LarkTitle))]
[JsonSerializable(typeof(LarkElement))]
[JsonSerializable(typeof(LarkText))]
[JsonSerializable(typeof(WebhookResponse))]
internal partial class LarkJsonContext : JsonSerializerContext
{
}

class LarkPayload
{
    public string Timestamp { get; set; } = string.Empty;
    public string Sign { get; set; } = string.Empty;
    public string MsgType { get; set; } = string.Empty;
    public LarkCard Card { get; set; } = new();
}

class LarkCard
{
    public LarkHeader Header { get; set; } = new();
    public object[] Elements { get; set; } = Array.Empty<object>();
}

class LarkHeader
{
    public LarkTitle Title { get; set; } = new();
    public string Template { get; set; } = string.Empty;
}

class LarkTitle
{
    public string Tag { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
}

class LarkElement
{
    public string Tag { get; set; } = string.Empty;
    public LarkText Text { get; set; } = new();
}

class LarkText
{
    public string Tag { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
}

class WebhookResponse
{
    /*
    Symptom: Î¶¨ÎàÖÏä§ AOT ÌôòÍ≤ΩÏóêÏÑú Îã§Ïùå Ïò§Î•ò Î∞úÏÉù
    -> "Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type AirBridge.Core.Notification.LarkWebhookClient+WebhookResponse. A class should either have a default cosntructor, one cosntructor with arguments or a cosntructor marked with the JsonConstructor attribute. Path 'code', line 1, position 8."

    Cause: Newtonsoft.JsonÏù¥ Î¶¨ÎàÖÏä§ AOT ÌôòÍ≤ΩÏóêÏÑú ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú Î¶¨ÌîåÎ†âÏÖòÏùÑ ÏÇ¨Ïö©Ìï¥ WebhookResponse Í∞ùÏ≤¥Î•º ÏÉùÏÑ±ÌïòÎ†§Í≥† Ìï† Îïå, Í∏∞Î≥∏ ÏÉùÏÑ±ÏûêÍ∞Ä ÏóÜÍ±∞ÎÇò AOT ÌôòÍ≤ΩÏóêÏÑú ÏÉùÏÑ±ÏûêÎ•º Ï∞æÏßÄ Î™ªÌï¥ÏÑú Î∞úÏÉùÌïòÎäî Ïò§Î•ò
    
    Solution: AOT ÌôòÍ≤ΩÏóêÏÑúÎäî Î¶¨ÌîåÎ†âÏÖòÏù¥ Ï†úÌïúÎêòÍ∏∞ ÎïåÎ¨∏Ïóê, Í∏∞Î≥∏ ÏÉùÏÑ±ÏûêÎ•º Î™ÖÏãúÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÌï¥Ï§ÄÎã§.
    */
    public WebhookResponse() // Í∏∞Î≥∏ ÏÉùÏÑ±Ïûê Ï∂îÍ∞Ä
    {
    }

    [JsonPropertyName("code")]
    public int Code { get; set; }

    [JsonPropertyName("msg")]
    public string? Msg { get; set; }
}